CREATE PROCEDURE CREDIT_BY_CUST(IN I_CUSTOMER_NUM CHAR(3))
	BEGIN
		DECLARE I_CUSTOMER_NAME CHAR(35);
		DECLARE I_CREDIT_LIMIT DECIMAL(8,2);
		SELECT CUSTOMER_NAME, CREDIT_LIMIT
		INTO I_CUSTOMER_NAME,I_CREDIT_LIMIT
		FROM CUSTOMER
		WHERE CUSTOMER_NUM = I_CUSTOMER_NUM;
		
		SELECT I_CUSTOMER_NAME, I_CREDIT_LIMIT;
	END$$
	
	
CREATE PROCEDURE DATE_NUM_NAME(IN I_ORDER_NUM CHAR(5))
	BEGIN
		DECLARE I_ORDER_DATE date;
		DECLARE I_CUSTOMER_NUM char(3);
		DECLARE I_CUSTOMER_NAME char(35);
		
		SELECT ORDER_DATE,O.CUSTOMER_NUM,CUSTOMER_NAME
		INTO I_ORDER_DATE,I_CUSTOMER_NUM,I_CUSTOMER_NAME
		FROM CUSTOMER C,ORDERS O
		WHERE C.CUSTOMER_NUM = O.CUSTOMER_NUM
		AND ORDER_NUM = I_ORDER_NUM;
		
		SELECT I_ORDER_DATE,I_CUSTOMER_NUM,I_CUSTOMER_NAME;
	END$$
	
CREATE PROCEDURE NEW_ORDER(IN I_ORDER_NUM char(5),IN I_ORDER_DATE date, IN I_CUSTOMER_NUM char(3))
	BEGIN
		INSERT INTO ORDERS(ORDER_NUM,ORDER_DATE,CUSTOMER_NUM) VALUES (I_ORDER_NUM,I_ORDER_DATE,I_CUSTOMER_NUM);
	END$$
	
CREATE PROCEDURE CHANGE_DATE(IN I_ORDER_NUM char(5), IN I_ORDER_DATE date)
	BEGIN
		UPDATE ORDERS
		SET ORDER_DATE = I_ORDER_DATE
		WHERE ORDER_NUM = I_ORDER_NUM;
	END$$
	
CREATE PROCEDURE DELETE_ORDER(IN I_ORDER_NUM char(5))
	BEGIN	
		DELETE FROM ORDERS
		WHERE ORDER_NUM = I_ORDER_NUM;
	END$$

DROP PROCEDURE IF EXISTS ITEM_INFO;
CREATE PROCEDURE ITEM_INFO(I_CATEGORY char(3))
	BEGIN		
		DECLARE I_ITEM_NUM char(4);
		DECLARE I_DESCRIPTION char(30);
		DECLARE I_STOREHOUSE char(1);
		DECLARE I_PRICE decimal(6,2);
		DECLARE done INT DEFAULT 0;
		DECLARE curItemInfo CURSOR FOR 
			SELECT ITEM_NUM,DESCRIPTION,STOREHOUSE,PRICE
			FROM ITEM
			WHERE CATEGORY = I_CATEGORY;
		DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;	
		Open curItemInfo;		
		REPEAT FETCH curItemInfo INTO I_ITEM_NUM,I_DESCRIPTION,I_STOREHOUSE,I_PRICE;
		IF NOT done THEN
			SELECT I_ITEM_NUM AS ITEM_NUM,I_DESCRIPTION AS DESCRIPTION,I_STOREHOUSE AS STOREHOUSE,I_PRICE AS PRICE;
		END IF;
		UNTIL done = 1 END REPEAT;			
		CLOSE curItemInfo;		
	END$$
	
Public Function DeleteOrder(I_ORDER_NUM)

	Dim strSQL As String
	
	strSQL = "DELETE FROM REP WHERE REP_NUM = '"
	strSQL = strSQL & I_ORDER_NUM
	strSQL = strSQL & "'"
	
	DoCmd.RunSQL strSQL
	
End Function



Public Function DateUpdate(I_ORDER_NUM,I_ORDER_DATE)
	
	Dim strSQL As String
	
	strSQL = "UPDATE ORDERS SET ORDER_DATE = '"
	strSQL = strSQL & I_ORDER_DATE
	strSQL = strSQL & ' WHERE ORDER_NUM = '"
	strSQL = strSQL & I_ORDER_NUM
	strSQL = strSQL & "'"
	
	DoCmd.RunSQL strSQL
	
End Function



Public Function FindItemInfo(I_CATEGORY)
	
	Dim rs As New ADODB.Recordset
	Dim cnn As ADODB.Connection
	Dim strSQL As String
	Set cnn = CurrentProject.Connection
	
	strSQL = "Select ITEM_NUM,DESCRIPTION,STOREHOUSE,PRICE FROM ITEM WHERE CATEGORY = '"
	strSQL = strSQL & I_CATEGORY
	strSQL = strSQL & "';"
	
	rs.Open strSQL, cnn, adOpenStatic, adCmdText
	Do Until rs.EOF
		Debug.Print (rs!ITEM_NUM)
		Debug.Print (rs!DESCRIPTION)
		Debug.Print (rs!STOREHOUSE)
		Debug.Print (rs!PRICE)
		rs.MoveNext
	Loop
	
End Function
		
CREATE PROCEDURE UPDATE_PRICE(IN I_ITEM_NUM char(4),I_PRICE decimal(6,2))
	BEGIN	
		UPDATE ITEM
		SET PRICE = I_PRICE
		WHERE ITEM_NUM = I_ITEM_NUM;
	END$$
DROP TRIGGER IF EXISTS UPDATE_COMMISSION;
CREATE TRIGGER UPDATE_COMMISSION BEFORE INSERT ON CUSTOMER
		FOR EACH ROW 
			BEGIN
				UPDATE REP SET COMMISSION = COMMISSION + (NEW.BALANCE * RATE)
				WHERE REP.REP_NUM = NEW.REP_NUM;
			END$$
			
DROP TRIGGER IF EXISTS UPDATE_COMMISSION_ON_BALANCE_UPDATE;
CREATE TRIGGER UPDATE_COMMISSION_ON_BALANCE_UPDATE BEFORE UPDATE ON CUSTOMER
		FOR EACH ROW 
			BEGIN
				UPDATE REP SET COMMISSION = COMMISSION + ((NEW.BALANCE-OLD.BALANCE) * RATE)
				WHERE REP.REP_NUM = NEW.REP_NUM;
			END$$
			

DROP TRIGGER IF EXISTS REMOVE_COMMISSION_ON_CUSTOMER_DELETE;
CREATE TRIGGER REMOVE_COMMISSION_ON_CUSTOMER_DELETE BEFORE DELETE ON CUSTOMER
		FOR EACH ROW 
			BEGIN
				UPDATE REP SET COMMISSION = COMMISSION - (OLD.BALANCE * RATE)
				WHERE REP.REP_NUM = OLD.REP_NUM;
			END$$